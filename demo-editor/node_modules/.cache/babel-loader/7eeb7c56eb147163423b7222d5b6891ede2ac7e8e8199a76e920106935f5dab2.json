{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\udaym\\\\OneDrive\\\\Desktop\\\\DraftJsEditor\\\\basic-editor\\\\src\\\\DemoEditor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Editor, EditorState, Modifier, SelectionState, convertToRaw, convertFromRaw } from \"draft-js\";\nimport \"./DemoEditor.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DemoEditor = () => {\n  _s();\n  const [editorState, setEditorState] = useState(loadContentFromLocalStorage() || EditorState.createEmpty());\n  const styleMap = {\n    COLOR_RED: {\n      color: \"red\"\n    },\n    H1_STYLE: {\n      fontSize: \"2em\",\n      fontWeight: \"bold\",\n      color: \"black\"\n    }\n  };\n  let editorRef;\n  useEffect(() => {\n    saveContentToLocalStorage(editorState);\n  }, [editorState]);\n  const handleSave = () => {\n    alert(\"Content saved!\");\n    saveContentToLocalStorage(editorState);\n  };\n  const saveContentToLocalStorage = editorState => {\n    const contentState = editorState.getCurrentContent();\n    const contentStateJSON = convertToRaw(contentState);\n    localStorage.setItem(\"editorContent\", JSON.stringify(contentStateJSON));\n  };\n  function loadContentFromLocalStorage() {\n    const savedContent = localStorage.getItem(\"editorContent\");\n    if (savedContent) {\n      const contentState = convertFromRaw(JSON.parse(savedContent));\n      return EditorState.createWithContent(contentState);\n    }\n    return null;\n  }\n  const onChange = newEditorState => {\n    const contentState = newEditorState.getCurrentContent();\n    const selection = newEditorState.getSelection();\n    const currentBlock = contentState.getBlockForKey(selection.getStartKey());\n    const blockText = currentBlock.getText();\n    if (blockText.startsWith(\"# \") && selection.isCollapsed()) {\n      // If the line starts with '* ' and the cursor is at the end of the line, remove '* ' and apply inline style to 'BOLD'\n      const blockKey = currentBlock.getKey();\n      const startOffset = 0;\n      const endOffset = blockText.length;\n\n      // Reset the entire content block's style\n      const clearedContentState = Modifier.setBlockType(contentState, selection.merge({\n        anchorOffset: 0,\n        focusOffset: blockText.length\n      }), \"\" // Resetting the style to 'unstyled'\n      );\n      // Remove any previous inline styles within the specified range\n      const contentStateWithoutPreviousInlineStyles = Modifier.replaceText(clearedContentState, selection.merge({\n        anchorOffset: startOffset,\n        focusOffset: endOffset\n      }), blockText.substring(startOffset, endOffset));\n      const updatedContentState = Modifier.applyInlineStyle(contentStateWithoutPreviousInlineStyles, selection.merge({\n        anchorOffset: startOffset,\n        focusOffset: endOffset\n      }), \"H1_STYLE\");\n      const newEditorStateWithBold = EditorState.push(newEditorState, updatedContentState, \"change-inline-style\");\n      setEditorState(newEditorStateWithBold);\n    } else if (blockText.startsWith(\"* \") && selection.isCollapsed()) {\n      // If the line starts with '* ' and the cursor is at the end of the line, remove '* ' and apply inline style to 'BOLD'\n      const blockKey = currentBlock.getKey();\n      const startOffset = 0;\n      const endOffset = blockText.length;\n\n      // Reset the entire content block's style\n      const clearedContentState = Modifier.setBlockType(contentState, selection.merge({\n        anchorOffset: 0,\n        focusOffset: blockText.length\n      }), \"\");\n      // Remove any previous inline styles within the specified range\n      const contentStateWithoutPreviousInlineStyles = Modifier.replaceText(clearedContentState, selection.merge({\n        anchorOffset: startOffset,\n        focusOffset: endOffset\n      }), blockText.substring(startOffset, endOffset));\n      const updatedContentState = Modifier.applyInlineStyle(contentStateWithoutPreviousInlineStyles, selection.merge({\n        anchorOffset: startOffset,\n        focusOffset: endOffset\n      }), \"BOLD\");\n      const newEditorStateWithBold = EditorState.push(newEditorState, updatedContentState, \"change-inline-style\");\n      setEditorState(newEditorStateWithBold);\n    } else if (blockText.startsWith(\"** \") && selection.isCollapsed()) {\n      // If the line starts with '** ' and the cursor is at the end of the line, apply inline style to change text color to red\n      const blockKey = currentBlock.getKey();\n      const startOffset = 0;\n      const endOffset = blockText.length;\n      const clearedContentState = Modifier.setBlockType(contentState, selection.merge({\n        anchorOffset: 0,\n        focusOffset: blockText.length\n      }), \"\");\n      // Remove any previous inline styles within the specified range\n      const contentStateWithoutPreviousInlineStyles = Modifier.replaceText(clearedContentState, selection.merge({\n        anchorOffset: startOffset,\n        focusOffset: endOffset\n      }), blockText.substring(startOffset, endOffset));\n      const updatedContentState = Modifier.applyInlineStyle(contentStateWithoutPreviousInlineStyles, selection.merge({\n        anchorOffset: startOffset,\n        focusOffset: endOffset\n      }), \"COLOR_RED\");\n      const newEditorStateWithRedText = EditorState.push(newEditorState, updatedContentState, \"change-inline-style\");\n      setEditorState(newEditorStateWithRedText);\n    } else if (blockText.startsWith(\"*** \") && selection.isCollapsed()) {\n      // If the line starts with '*** ' and the cursor is at the end of the line, apply inline style to 'UNDERLINE'\n      const blockKey = currentBlock.getKey();\n      const startOffset = 0;\n      const endOffset = blockText.length;\n      const clearedContentState = Modifier.setBlockType(contentState, selection.merge({\n        anchorOffset: 0,\n        focusOffset: blockText.length\n      }), \"\" // Resetting the style to 'unstyled'\n      );\n      // Remove any previous inline styles within the specified range\n      const contentStateWithoutPreviousInlineStyles = Modifier.replaceText(clearedContentState, selection.merge({\n        anchorOffset: startOffset,\n        focusOffset: endOffset\n      }), blockText.substring(startOffset, endOffset));\n      const updatedContentState = Modifier.applyInlineStyle(contentStateWithoutPreviousInlineStyles, selection.merge({\n        anchorOffset: startOffset,\n        focusOffset: endOffset\n      }), \"UNDERLINE\");\n      const newEditorStateWithUnderline = EditorState.push(newEditorState, updatedContentState, \"change-inline-style\");\n      setEditorState(newEditorStateWithUnderline);\n    } else {\n      setEditorState(newEditorState);\n    }\n  };\n  const handleEditorChange = newEditorState => {\n    const contentState = newEditorState.getCurrentContent();\n    const selection = newEditorState.getSelection();\n    const currentBlock = contentState.getBlockForKey(selection.getStartKey());\n    const blockText = currentBlock.getText();\n    if (blockText.endsWith('```') && selection.isCollapsed()) {\n      const blockKey = currentBlock.getKey();\n      const startOffset = blockText.lastIndexOf('```');\n      const endOffset = blockText.length;\n\n      // Create a new SelectionState for the range of '```'\n      const codeBlockSelection = SelectionState.createEmpty(blockKey).merge({\n        anchorOffset: startOffset,\n        focusOffset: endOffset\n      });\n\n      // Apply code block style to the range of '```'\n      const updatedContentState = Modifier.applyBlockType(contentState, codeBlockSelection, 'code-block');\n\n      // Push the updated content state to the editor state\n      const newEditorStateWithCodeBlock = EditorState.push(newEditorState, updatedContentState, 'change-block-type');\n\n      // Update the editor state\n      setEditorState(newEditorStateWithCodeBlock);\n    } else {\n      setEditorState(newEditorState);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"editor-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Demo Editor by Uday Mahale\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-box\",\n      onClick: () => editorRef.focus(),\n      children: /*#__PURE__*/_jsxDEV(Editor, {\n        ref: ref => editorRef = ref,\n        editorState: editorState,\n        onChange: onChange,\n        customStyleMap: styleMap\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 5\n  }, this);\n};\n_s(DemoEditor, \"Yl1Nwnr39UYvrXkoYSZwAMD4elE=\");\n_c = DemoEditor;\nexport default DemoEditor;\nvar _c;\n$RefreshReg$(_c, \"DemoEditor\");","map":{"version":3,"names":["React","useState","useEffect","Editor","EditorState","Modifier","SelectionState","convertToRaw","convertFromRaw","jsxDEV","_jsxDEV","DemoEditor","_s","editorState","setEditorState","loadContentFromLocalStorage","createEmpty","styleMap","COLOR_RED","color","H1_STYLE","fontSize","fontWeight","editorRef","saveContentToLocalStorage","handleSave","alert","contentState","getCurrentContent","contentStateJSON","localStorage","setItem","JSON","stringify","savedContent","getItem","parse","createWithContent","onChange","newEditorState","selection","getSelection","currentBlock","getBlockForKey","getStartKey","blockText","getText","startsWith","isCollapsed","blockKey","getKey","startOffset","endOffset","length","clearedContentState","setBlockType","merge","anchorOffset","focusOffset","contentStateWithoutPreviousInlineStyles","replaceText","substring","updatedContentState","applyInlineStyle","newEditorStateWithBold","push","newEditorStateWithRedText","newEditorStateWithUnderline","handleEditorChange","endsWith","lastIndexOf","codeBlockSelection","applyBlockType","newEditorStateWithCodeBlock","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","focus","ref","customStyleMap","_c","$RefreshReg$"],"sources":["C:/Users/udaym/OneDrive/Desktop/DraftJsEditor/basic-editor/src/DemoEditor.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Editor,\r\n  EditorState,\r\n  Modifier,\r\n  SelectionState,\r\n  convertToRaw,\r\n  convertFromRaw,\r\n} from \"draft-js\";\r\nimport \"./DemoEditor.css\";\r\n\r\nconst DemoEditor = () => {\r\n  const [editorState, setEditorState] = useState(\r\n    loadContentFromLocalStorage() || EditorState.createEmpty()\r\n  );\r\n  const styleMap = {\r\n    COLOR_RED: {\r\n      color: \"red\",\r\n    },\r\n    H1_STYLE: {\r\n      fontSize: \"2em\",\r\n      fontWeight: \"bold\",\r\n      color: \"black\",\r\n    },\r\n  };\r\n  let editorRef;\r\n\r\n  useEffect(() => {\r\n    saveContentToLocalStorage(editorState);\r\n  }, [editorState]);\r\n\r\n  const handleSave = () => {\r\n    alert(\"Content saved!\");\r\n    saveContentToLocalStorage(editorState);\r\n  };\r\n  const saveContentToLocalStorage = (editorState) => {\r\n    const contentState = editorState.getCurrentContent();\r\n    const contentStateJSON = convertToRaw(contentState);\r\n    localStorage.setItem(\"editorContent\", JSON.stringify(contentStateJSON));\r\n  };\r\n\r\n  function loadContentFromLocalStorage() {\r\n    const savedContent = localStorage.getItem(\"editorContent\");\r\n    if (savedContent) {\r\n      const contentState = convertFromRaw(JSON.parse(savedContent));\r\n      return EditorState.createWithContent(contentState);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  const onChange = (newEditorState) => {\r\n    const contentState = newEditorState.getCurrentContent();\r\n    const selection = newEditorState.getSelection();\r\n    const currentBlock = contentState.getBlockForKey(selection.getStartKey());\r\n    const blockText = currentBlock.getText();\r\n\r\n    if (blockText.startsWith(\"# \") && selection.isCollapsed()) {\r\n      // If the line starts with '* ' and the cursor is at the end of the line, remove '* ' and apply inline style to 'BOLD'\r\n      const blockKey = currentBlock.getKey();\r\n      const startOffset = 0;\r\n      const endOffset = blockText.length;\r\n\r\n      // Reset the entire content block's style\r\n      const clearedContentState = Modifier.setBlockType(\r\n        contentState,\r\n        selection.merge({\r\n          anchorOffset: 0,\r\n          focusOffset: blockText.length,\r\n        }),\r\n        \"\" // Resetting the style to 'unstyled'\r\n      );\r\n      // Remove any previous inline styles within the specified range\r\n      const contentStateWithoutPreviousInlineStyles = Modifier.replaceText(\r\n        clearedContentState,\r\n        selection.merge({\r\n          anchorOffset: startOffset,\r\n          focusOffset: endOffset,\r\n        }),\r\n        blockText.substring(startOffset, endOffset)\r\n      );\r\n      const updatedContentState = Modifier.applyInlineStyle(\r\n        contentStateWithoutPreviousInlineStyles,\r\n        selection.merge({\r\n          anchorOffset: startOffset,\r\n          focusOffset: endOffset,\r\n        }),\r\n        \"H1_STYLE\"\r\n      );\r\n\r\n      const newEditorStateWithBold = EditorState.push(\r\n        newEditorState,\r\n        updatedContentState,\r\n        \"change-inline-style\"\r\n      );\r\n      setEditorState(newEditorStateWithBold);\r\n    } else if (blockText.startsWith(\"* \") && selection.isCollapsed()) {\r\n      // If the line starts with '* ' and the cursor is at the end of the line, remove '* ' and apply inline style to 'BOLD'\r\n      const blockKey = currentBlock.getKey();\r\n      const startOffset = 0;\r\n      const endOffset = blockText.length;\r\n\r\n      // Reset the entire content block's style\r\n      const clearedContentState = Modifier.setBlockType(\r\n        contentState,\r\n        selection.merge({\r\n          anchorOffset: 0,\r\n          focusOffset: blockText.length,\r\n        }),\r\n        \"\"\r\n      );\r\n      // Remove any previous inline styles within the specified range\r\n      const contentStateWithoutPreviousInlineStyles = Modifier.replaceText(\r\n        clearedContentState,\r\n        selection.merge({\r\n          anchorOffset: startOffset,\r\n          focusOffset: endOffset,\r\n        }),\r\n        blockText.substring(startOffset, endOffset)\r\n      );\r\n      const updatedContentState = Modifier.applyInlineStyle(\r\n        contentStateWithoutPreviousInlineStyles,\r\n        selection.merge({\r\n          anchorOffset: startOffset,\r\n          focusOffset: endOffset,\r\n        }),\r\n        \"BOLD\"\r\n      );\r\n\r\n      const newEditorStateWithBold = EditorState.push(\r\n        newEditorState,\r\n        updatedContentState,\r\n        \"change-inline-style\"\r\n      );\r\n      setEditorState(newEditorStateWithBold);\r\n    } else if (blockText.startsWith(\"** \") && selection.isCollapsed()) {\r\n      // If the line starts with '** ' and the cursor is at the end of the line, apply inline style to change text color to red\r\n      const blockKey = currentBlock.getKey();\r\n      const startOffset = 0;\r\n      const endOffset = blockText.length;\r\n\r\n      const clearedContentState = Modifier.setBlockType(\r\n        contentState,\r\n        selection.merge({\r\n          anchorOffset: 0,\r\n          focusOffset: blockText.length,\r\n        }),\r\n        \"\"\r\n      );\r\n      // Remove any previous inline styles within the specified range\r\n      const contentStateWithoutPreviousInlineStyles = Modifier.replaceText(\r\n        clearedContentState,\r\n        selection.merge({\r\n          anchorOffset: startOffset,\r\n          focusOffset: endOffset,\r\n        }),\r\n        blockText.substring(startOffset, endOffset)\r\n      );\r\n\r\n      const updatedContentState = Modifier.applyInlineStyle(\r\n        contentStateWithoutPreviousInlineStyles,\r\n        selection.merge({\r\n          anchorOffset: startOffset,\r\n          focusOffset: endOffset,\r\n        }),\r\n        \"COLOR_RED\"\r\n      );\r\n\r\n      const newEditorStateWithRedText = EditorState.push(\r\n        newEditorState,\r\n        updatedContentState,\r\n        \"change-inline-style\"\r\n      );\r\n      setEditorState(newEditorStateWithRedText);\r\n    } else if (blockText.startsWith(\"*** \") && selection.isCollapsed()) {\r\n      // If the line starts with '*** ' and the cursor is at the end of the line, apply inline style to 'UNDERLINE'\r\n      const blockKey = currentBlock.getKey();\r\n      const startOffset = 0;\r\n      const endOffset = blockText.length;\r\n      const clearedContentState = Modifier.setBlockType(\r\n        contentState,\r\n        selection.merge({\r\n          anchorOffset: 0,\r\n          focusOffset: blockText.length,\r\n        }),\r\n        \"\" // Resetting the style to 'unstyled'\r\n      );\r\n      // Remove any previous inline styles within the specified range\r\n      const contentStateWithoutPreviousInlineStyles = Modifier.replaceText(\r\n        clearedContentState,\r\n        selection.merge({\r\n          anchorOffset: startOffset,\r\n          focusOffset: endOffset,\r\n        }),\r\n        blockText.substring(startOffset, endOffset)\r\n      );\r\n\r\n      const updatedContentState = Modifier.applyInlineStyle(\r\n        contentStateWithoutPreviousInlineStyles,\r\n        selection.merge({\r\n          anchorOffset: startOffset,\r\n          focusOffset: endOffset,\r\n        }),\r\n        \"UNDERLINE\"\r\n      );\r\n\r\n      const newEditorStateWithUnderline = EditorState.push(\r\n        newEditorState,\r\n        updatedContentState,\r\n        \"change-inline-style\"\r\n      );\r\n      setEditorState(newEditorStateWithUnderline);\r\n    } else {\r\n      setEditorState(newEditorState);\r\n    }\r\n  };\r\n\r\n  const handleEditorChange = (newEditorState) => {\r\n    const contentState = newEditorState.getCurrentContent();\r\n    const selection = newEditorState.getSelection();\r\n    const currentBlock = contentState.getBlockForKey(selection.getStartKey());\r\n    const blockText = currentBlock.getText();\r\n  \r\n    if (blockText.endsWith('```') && selection.isCollapsed()) {\r\n      const blockKey = currentBlock.getKey();\r\n      const startOffset = blockText.lastIndexOf('```');\r\n      const endOffset = blockText.length;\r\n  \r\n      // Create a new SelectionState for the range of '```'\r\n      const codeBlockSelection = SelectionState.createEmpty(blockKey)\r\n        .merge({\r\n          anchorOffset: startOffset,\r\n          focusOffset: endOffset,\r\n        });\r\n  \r\n      // Apply code block style to the range of '```'\r\n      const updatedContentState = Modifier.applyBlockType(\r\n        contentState,\r\n        codeBlockSelection,\r\n        'code-block'\r\n      );\r\n  \r\n      // Push the updated content state to the editor state\r\n      const newEditorStateWithCodeBlock = EditorState.push(\r\n        newEditorState,\r\n        updatedContentState,\r\n        'change-block-type'\r\n      );\r\n  \r\n      // Update the editor state\r\n      setEditorState(newEditorStateWithCodeBlock);\r\n    } else {\r\n      setEditorState(newEditorState);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className=\"editor-container\">\r\n      <div className=\"header\">\r\n        <h5>Demo Editor by Uday Mahale</h5>\r\n        <button onClick={handleSave}>Save</button>\r\n      </div>\r\n      <div className=\"text-box\" onClick={() => editorRef.focus()}>\r\n        <Editor\r\n          ref={(ref) => (editorRef = ref)}\r\n          editorState={editorState}\r\n          onChange={onChange}\r\n          customStyleMap={styleMap}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DemoEditor;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SACEC,MAAM,EACNC,WAAW,EACXC,QAAQ,EACRC,cAAc,EACdC,YAAY,EACZC,cAAc,QACT,UAAU;AACjB,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAC5Cc,2BAA2B,CAAC,CAAC,IAAIX,WAAW,CAACY,WAAW,CAAC,CAC3D,CAAC;EACD,MAAMC,QAAQ,GAAG;IACfC,SAAS,EAAE;MACTC,KAAK,EAAE;IACT,CAAC;IACDC,QAAQ,EAAE;MACRC,QAAQ,EAAE,KAAK;MACfC,UAAU,EAAE,MAAM;MAClBH,KAAK,EAAE;IACT;EACF,CAAC;EACD,IAAII,SAAS;EAEbrB,SAAS,CAAC,MAAM;IACdsB,yBAAyB,CAACX,WAAW,CAAC;EACxC,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAEjB,MAAMY,UAAU,GAAGA,CAAA,KAAM;IACvBC,KAAK,CAAC,gBAAgB,CAAC;IACvBF,yBAAyB,CAACX,WAAW,CAAC;EACxC,CAAC;EACD,MAAMW,yBAAyB,GAAIX,WAAW,IAAK;IACjD,MAAMc,YAAY,GAAGd,WAAW,CAACe,iBAAiB,CAAC,CAAC;IACpD,MAAMC,gBAAgB,GAAGtB,YAAY,CAACoB,YAAY,CAAC;IACnDG,YAAY,CAACC,OAAO,CAAC,eAAe,EAAEC,IAAI,CAACC,SAAS,CAACJ,gBAAgB,CAAC,CAAC;EACzE,CAAC;EAED,SAASd,2BAA2BA,CAAA,EAAG;IACrC,MAAMmB,YAAY,GAAGJ,YAAY,CAACK,OAAO,CAAC,eAAe,CAAC;IAC1D,IAAID,YAAY,EAAE;MAChB,MAAMP,YAAY,GAAGnB,cAAc,CAACwB,IAAI,CAACI,KAAK,CAACF,YAAY,CAAC,CAAC;MAC7D,OAAO9B,WAAW,CAACiC,iBAAiB,CAACV,YAAY,CAAC;IACpD;IACA,OAAO,IAAI;EACb;EAEA,MAAMW,QAAQ,GAAIC,cAAc,IAAK;IACnC,MAAMZ,YAAY,GAAGY,cAAc,CAACX,iBAAiB,CAAC,CAAC;IACvD,MAAMY,SAAS,GAAGD,cAAc,CAACE,YAAY,CAAC,CAAC;IAC/C,MAAMC,YAAY,GAAGf,YAAY,CAACgB,cAAc,CAACH,SAAS,CAACI,WAAW,CAAC,CAAC,CAAC;IACzE,MAAMC,SAAS,GAAGH,YAAY,CAACI,OAAO,CAAC,CAAC;IAExC,IAAID,SAAS,CAACE,UAAU,CAAC,IAAI,CAAC,IAAIP,SAAS,CAACQ,WAAW,CAAC,CAAC,EAAE;MACzD;MACA,MAAMC,QAAQ,GAAGP,YAAY,CAACQ,MAAM,CAAC,CAAC;MACtC,MAAMC,WAAW,GAAG,CAAC;MACrB,MAAMC,SAAS,GAAGP,SAAS,CAACQ,MAAM;;MAElC;MACA,MAAMC,mBAAmB,GAAGjD,QAAQ,CAACkD,YAAY,CAC/C5B,YAAY,EACZa,SAAS,CAACgB,KAAK,CAAC;QACdC,YAAY,EAAE,CAAC;QACfC,WAAW,EAAEb,SAAS,CAACQ;MACzB,CAAC,CAAC,EACF,EAAE,CAAC;MACL,CAAC;MACD;MACA,MAAMM,uCAAuC,GAAGtD,QAAQ,CAACuD,WAAW,CAClEN,mBAAmB,EACnBd,SAAS,CAACgB,KAAK,CAAC;QACdC,YAAY,EAAEN,WAAW;QACzBO,WAAW,EAAEN;MACf,CAAC,CAAC,EACFP,SAAS,CAACgB,SAAS,CAACV,WAAW,EAAEC,SAAS,CAC5C,CAAC;MACD,MAAMU,mBAAmB,GAAGzD,QAAQ,CAAC0D,gBAAgB,CACnDJ,uCAAuC,EACvCnB,SAAS,CAACgB,KAAK,CAAC;QACdC,YAAY,EAAEN,WAAW;QACzBO,WAAW,EAAEN;MACf,CAAC,CAAC,EACF,UACF,CAAC;MAED,MAAMY,sBAAsB,GAAG5D,WAAW,CAAC6D,IAAI,CAC7C1B,cAAc,EACduB,mBAAmB,EACnB,qBACF,CAAC;MACDhD,cAAc,CAACkD,sBAAsB,CAAC;IACxC,CAAC,MAAM,IAAInB,SAAS,CAACE,UAAU,CAAC,IAAI,CAAC,IAAIP,SAAS,CAACQ,WAAW,CAAC,CAAC,EAAE;MAChE;MACA,MAAMC,QAAQ,GAAGP,YAAY,CAACQ,MAAM,CAAC,CAAC;MACtC,MAAMC,WAAW,GAAG,CAAC;MACrB,MAAMC,SAAS,GAAGP,SAAS,CAACQ,MAAM;;MAElC;MACA,MAAMC,mBAAmB,GAAGjD,QAAQ,CAACkD,YAAY,CAC/C5B,YAAY,EACZa,SAAS,CAACgB,KAAK,CAAC;QACdC,YAAY,EAAE,CAAC;QACfC,WAAW,EAAEb,SAAS,CAACQ;MACzB,CAAC,CAAC,EACF,EACF,CAAC;MACD;MACA,MAAMM,uCAAuC,GAAGtD,QAAQ,CAACuD,WAAW,CAClEN,mBAAmB,EACnBd,SAAS,CAACgB,KAAK,CAAC;QACdC,YAAY,EAAEN,WAAW;QACzBO,WAAW,EAAEN;MACf,CAAC,CAAC,EACFP,SAAS,CAACgB,SAAS,CAACV,WAAW,EAAEC,SAAS,CAC5C,CAAC;MACD,MAAMU,mBAAmB,GAAGzD,QAAQ,CAAC0D,gBAAgB,CACnDJ,uCAAuC,EACvCnB,SAAS,CAACgB,KAAK,CAAC;QACdC,YAAY,EAAEN,WAAW;QACzBO,WAAW,EAAEN;MACf,CAAC,CAAC,EACF,MACF,CAAC;MAED,MAAMY,sBAAsB,GAAG5D,WAAW,CAAC6D,IAAI,CAC7C1B,cAAc,EACduB,mBAAmB,EACnB,qBACF,CAAC;MACDhD,cAAc,CAACkD,sBAAsB,CAAC;IACxC,CAAC,MAAM,IAAInB,SAAS,CAACE,UAAU,CAAC,KAAK,CAAC,IAAIP,SAAS,CAACQ,WAAW,CAAC,CAAC,EAAE;MACjE;MACA,MAAMC,QAAQ,GAAGP,YAAY,CAACQ,MAAM,CAAC,CAAC;MACtC,MAAMC,WAAW,GAAG,CAAC;MACrB,MAAMC,SAAS,GAAGP,SAAS,CAACQ,MAAM;MAElC,MAAMC,mBAAmB,GAAGjD,QAAQ,CAACkD,YAAY,CAC/C5B,YAAY,EACZa,SAAS,CAACgB,KAAK,CAAC;QACdC,YAAY,EAAE,CAAC;QACfC,WAAW,EAAEb,SAAS,CAACQ;MACzB,CAAC,CAAC,EACF,EACF,CAAC;MACD;MACA,MAAMM,uCAAuC,GAAGtD,QAAQ,CAACuD,WAAW,CAClEN,mBAAmB,EACnBd,SAAS,CAACgB,KAAK,CAAC;QACdC,YAAY,EAAEN,WAAW;QACzBO,WAAW,EAAEN;MACf,CAAC,CAAC,EACFP,SAAS,CAACgB,SAAS,CAACV,WAAW,EAAEC,SAAS,CAC5C,CAAC;MAED,MAAMU,mBAAmB,GAAGzD,QAAQ,CAAC0D,gBAAgB,CACnDJ,uCAAuC,EACvCnB,SAAS,CAACgB,KAAK,CAAC;QACdC,YAAY,EAAEN,WAAW;QACzBO,WAAW,EAAEN;MACf,CAAC,CAAC,EACF,WACF,CAAC;MAED,MAAMc,yBAAyB,GAAG9D,WAAW,CAAC6D,IAAI,CAChD1B,cAAc,EACduB,mBAAmB,EACnB,qBACF,CAAC;MACDhD,cAAc,CAACoD,yBAAyB,CAAC;IAC3C,CAAC,MAAM,IAAIrB,SAAS,CAACE,UAAU,CAAC,MAAM,CAAC,IAAIP,SAAS,CAACQ,WAAW,CAAC,CAAC,EAAE;MAClE;MACA,MAAMC,QAAQ,GAAGP,YAAY,CAACQ,MAAM,CAAC,CAAC;MACtC,MAAMC,WAAW,GAAG,CAAC;MACrB,MAAMC,SAAS,GAAGP,SAAS,CAACQ,MAAM;MAClC,MAAMC,mBAAmB,GAAGjD,QAAQ,CAACkD,YAAY,CAC/C5B,YAAY,EACZa,SAAS,CAACgB,KAAK,CAAC;QACdC,YAAY,EAAE,CAAC;QACfC,WAAW,EAAEb,SAAS,CAACQ;MACzB,CAAC,CAAC,EACF,EAAE,CAAC;MACL,CAAC;MACD;MACA,MAAMM,uCAAuC,GAAGtD,QAAQ,CAACuD,WAAW,CAClEN,mBAAmB,EACnBd,SAAS,CAACgB,KAAK,CAAC;QACdC,YAAY,EAAEN,WAAW;QACzBO,WAAW,EAAEN;MACf,CAAC,CAAC,EACFP,SAAS,CAACgB,SAAS,CAACV,WAAW,EAAEC,SAAS,CAC5C,CAAC;MAED,MAAMU,mBAAmB,GAAGzD,QAAQ,CAAC0D,gBAAgB,CACnDJ,uCAAuC,EACvCnB,SAAS,CAACgB,KAAK,CAAC;QACdC,YAAY,EAAEN,WAAW;QACzBO,WAAW,EAAEN;MACf,CAAC,CAAC,EACF,WACF,CAAC;MAED,MAAMe,2BAA2B,GAAG/D,WAAW,CAAC6D,IAAI,CAClD1B,cAAc,EACduB,mBAAmB,EACnB,qBACF,CAAC;MACDhD,cAAc,CAACqD,2BAA2B,CAAC;IAC7C,CAAC,MAAM;MACLrD,cAAc,CAACyB,cAAc,CAAC;IAChC;EACF,CAAC;EAED,MAAM6B,kBAAkB,GAAI7B,cAAc,IAAK;IAC7C,MAAMZ,YAAY,GAAGY,cAAc,CAACX,iBAAiB,CAAC,CAAC;IACvD,MAAMY,SAAS,GAAGD,cAAc,CAACE,YAAY,CAAC,CAAC;IAC/C,MAAMC,YAAY,GAAGf,YAAY,CAACgB,cAAc,CAACH,SAAS,CAACI,WAAW,CAAC,CAAC,CAAC;IACzE,MAAMC,SAAS,GAAGH,YAAY,CAACI,OAAO,CAAC,CAAC;IAExC,IAAID,SAAS,CAACwB,QAAQ,CAAC,KAAK,CAAC,IAAI7B,SAAS,CAACQ,WAAW,CAAC,CAAC,EAAE;MACxD,MAAMC,QAAQ,GAAGP,YAAY,CAACQ,MAAM,CAAC,CAAC;MACtC,MAAMC,WAAW,GAAGN,SAAS,CAACyB,WAAW,CAAC,KAAK,CAAC;MAChD,MAAMlB,SAAS,GAAGP,SAAS,CAACQ,MAAM;;MAElC;MACA,MAAMkB,kBAAkB,GAAGjE,cAAc,CAACU,WAAW,CAACiC,QAAQ,CAAC,CAC5DO,KAAK,CAAC;QACLC,YAAY,EAAEN,WAAW;QACzBO,WAAW,EAAEN;MACf,CAAC,CAAC;;MAEJ;MACA,MAAMU,mBAAmB,GAAGzD,QAAQ,CAACmE,cAAc,CACjD7C,YAAY,EACZ4C,kBAAkB,EAClB,YACF,CAAC;;MAED;MACA,MAAME,2BAA2B,GAAGrE,WAAW,CAAC6D,IAAI,CAClD1B,cAAc,EACduB,mBAAmB,EACnB,mBACF,CAAC;;MAED;MACAhD,cAAc,CAAC2D,2BAA2B,CAAC;IAC7C,CAAC,MAAM;MACL3D,cAAc,CAACyB,cAAc,CAAC;IAChC;EACF,CAAC;EAED,oBACE7B,OAAA;IAAKgE,SAAS,EAAC,kBAAkB;IAAAC,QAAA,gBAC/BjE,OAAA;MAAKgE,SAAS,EAAC,QAAQ;MAAAC,QAAA,gBACrBjE,OAAA;QAAAiE,QAAA,EAAI;MAA0B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACnCrE,OAAA;QAAQsE,OAAO,EAAEvD,UAAW;QAAAkD,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CAAC,eACNrE,OAAA;MAAKgE,SAAS,EAAC,UAAU;MAACM,OAAO,EAAEA,CAAA,KAAMzD,SAAS,CAAC0D,KAAK,CAAC,CAAE;MAAAN,QAAA,eACzDjE,OAAA,CAACP,MAAM;QACL+E,GAAG,EAAGA,GAAG,IAAM3D,SAAS,GAAG2D,GAAK;QAChCrE,WAAW,EAAEA,WAAY;QACzByB,QAAQ,EAAEA,QAAS;QACnB6C,cAAc,EAAElE;MAAS;QAAA2D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACnE,EAAA,CApQID,UAAU;AAAAyE,EAAA,GAAVzE,UAAU;AAsQhB,eAAeA,UAAU;AAAC,IAAAyE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}