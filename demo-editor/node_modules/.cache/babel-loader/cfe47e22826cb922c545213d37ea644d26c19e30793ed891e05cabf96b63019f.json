{"ast":null,"code":"/**\n * @license\n * MIT License\n * \n * Copyright (c) 2014-present, Lee Byron and other contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nimport { isImmutable } from '../predicates/isImmutable.js';\nimport hasOwnProperty from '../utils/hasOwnProperty.js';\nimport isDataStructure from '../utils/isDataStructure.js';\nimport shallowCopy from '../utils/shallowCopy.js';\nfunction remove(collection, key) {\n  if (!isDataStructure(collection)) {\n    throw new TypeError('Cannot update non-data-structure value: ' + collection);\n  }\n  if (isImmutable(collection)) {\n    if (!collection.remove) {\n      throw new TypeError('Cannot update immutable value without .remove() method: ' + collection);\n    }\n    return collection.remove(key);\n  }\n  if (!hasOwnProperty.call(collection, key)) {\n    return collection;\n  }\n  var collectionCopy = shallowCopy(collection);\n  if (Array.isArray(collectionCopy)) {\n    collectionCopy.splice(key, 1);\n  } else {\n    delete collectionCopy[key];\n  }\n  return collectionCopy;\n}\nexport { remove };","map":{"version":3,"names":["isImmutable","hasOwnProperty","isDataStructure","shallowCopy","remove","collection","key","TypeError","call","collectionCopy","Array","isArray","splice"],"sources":["C:/Users/udaym/OneDrive/Desktop/DraftJsEditor/node_modules/immutable/dist/es/functional/remove.js"],"sourcesContent":["/**\n * @license\n * MIT License\n * \n * Copyright (c) 2014-present, Lee Byron and other contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nimport { isImmutable } from '../predicates/isImmutable.js';\nimport hasOwnProperty from '../utils/hasOwnProperty.js';\nimport isDataStructure from '../utils/isDataStructure.js';\nimport shallowCopy from '../utils/shallowCopy.js';\n\nfunction remove(collection, key) {\n  if (!isDataStructure(collection)) {\n    throw new TypeError(\n      'Cannot update non-data-structure value: ' + collection\n    );\n  }\n  if (isImmutable(collection)) {\n    if (!collection.remove) {\n      throw new TypeError(\n        'Cannot update immutable value without .remove() method: ' + collection\n      );\n    }\n    return collection.remove(key);\n  }\n  if (!hasOwnProperty.call(collection, key)) {\n    return collection;\n  }\n  var collectionCopy = shallowCopy(collection);\n  if (Array.isArray(collectionCopy)) {\n    collectionCopy.splice(key, 1);\n  } else {\n    delete collectionCopy[key];\n  }\n  return collectionCopy;\n}\n\nexport { remove };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,WAAW,QAAQ,8BAA8B;AAC1D,OAAOC,cAAc,MAAM,4BAA4B;AACvD,OAAOC,eAAe,MAAM,6BAA6B;AACzD,OAAOC,WAAW,MAAM,yBAAyB;AAEjD,SAASC,MAAMA,CAACC,UAAU,EAAEC,GAAG,EAAE;EAC/B,IAAI,CAACJ,eAAe,CAACG,UAAU,CAAC,EAAE;IAChC,MAAM,IAAIE,SAAS,CACjB,0CAA0C,GAAGF,UAC/C,CAAC;EACH;EACA,IAAIL,WAAW,CAACK,UAAU,CAAC,EAAE;IAC3B,IAAI,CAACA,UAAU,CAACD,MAAM,EAAE;MACtB,MAAM,IAAIG,SAAS,CACjB,0DAA0D,GAAGF,UAC/D,CAAC;IACH;IACA,OAAOA,UAAU,CAACD,MAAM,CAACE,GAAG,CAAC;EAC/B;EACA,IAAI,CAACL,cAAc,CAACO,IAAI,CAACH,UAAU,EAAEC,GAAG,CAAC,EAAE;IACzC,OAAOD,UAAU;EACnB;EACA,IAAII,cAAc,GAAGN,WAAW,CAACE,UAAU,CAAC;EAC5C,IAAIK,KAAK,CAACC,OAAO,CAACF,cAAc,CAAC,EAAE;IACjCA,cAAc,CAACG,MAAM,CAACN,GAAG,EAAE,CAAC,CAAC;EAC/B,CAAC,MAAM;IACL,OAAOG,cAAc,CAACH,GAAG,CAAC;EAC5B;EACA,OAAOG,cAAc;AACvB;AAEA,SAASL,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}