{"ast":null,"code":"/**\n * @license\n * MIT License\n * \n * Copyright (c) 2014-present, Lee Byron and other contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nimport { KeyedCollection, SetCollection } from './Collection.js';\nimport { IS_ORDERED_SYMBOL } from './predicates/isOrdered.js';\nimport { isOrderedSet } from './predicates/isOrderedSet.js';\nimport { IndexedCollectionPrototype } from './CollectionImpl.js';\nimport { Set } from './Set.js';\nimport { emptyOrderedMap } from './OrderedMap.js';\nimport assertNotInfinite from './utils/assertNotInfinite.js';\nvar OrderedSet = /*@__PURE__*/function (Set) {\n  function OrderedSet(value) {\n    return value === undefined || value === null ? emptyOrderedSet() : isOrderedSet(value) ? value : emptyOrderedSet().withMutations(function (set) {\n      var iter = SetCollection(value);\n      assertNotInfinite(iter.size);\n      iter.forEach(function (v) {\n        return set.add(v);\n      });\n    });\n  }\n  if (Set) OrderedSet.__proto__ = Set;\n  OrderedSet.prototype = Object.create(Set && Set.prototype);\n  OrderedSet.prototype.constructor = OrderedSet;\n  OrderedSet.of = function of( /*...values*/\n  ) {\n    return this(arguments);\n  };\n  OrderedSet.fromKeys = function fromKeys(value) {\n    return this(KeyedCollection(value).keySeq());\n  };\n  OrderedSet.prototype.toString = function toString() {\n    return this.__toString('OrderedSet {', '}');\n  };\n  return OrderedSet;\n}(Set);\nOrderedSet.isOrderedSet = isOrderedSet;\nvar OrderedSetPrototype = OrderedSet.prototype;\nOrderedSetPrototype[IS_ORDERED_SYMBOL] = true;\nOrderedSetPrototype.zip = IndexedCollectionPrototype.zip;\nOrderedSetPrototype.zipWith = IndexedCollectionPrototype.zipWith;\nOrderedSetPrototype.zipAll = IndexedCollectionPrototype.zipAll;\nOrderedSetPrototype.__empty = emptyOrderedSet;\nOrderedSetPrototype.__make = makeOrderedSet;\nfunction makeOrderedSet(map, ownerID) {\n  var set = Object.create(OrderedSetPrototype);\n  set.size = map ? map.size : 0;\n  set._map = map;\n  set.__ownerID = ownerID;\n  return set;\n}\nvar EMPTY_ORDERED_SET;\nfunction emptyOrderedSet() {\n  return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));\n}\nexport { OrderedSet };","map":{"version":3,"names":["KeyedCollection","SetCollection","IS_ORDERED_SYMBOL","isOrderedSet","IndexedCollectionPrototype","Set","emptyOrderedMap","assertNotInfinite","OrderedSet","value","undefined","emptyOrderedSet","withMutations","set","iter","size","forEach","v","add","__proto__","prototype","Object","create","constructor","of","arguments","fromKeys","keySeq","toString","__toString","OrderedSetPrototype","zip","zipWith","zipAll","__empty","__make","makeOrderedSet","map","ownerID","_map","__ownerID","EMPTY_ORDERED_SET"],"sources":["C:/Users/udaym/OneDrive/Desktop/DraftJsEditor/node_modules/immutable/dist/es/OrderedSet.js"],"sourcesContent":["/**\n * @license\n * MIT License\n * \n * Copyright (c) 2014-present, Lee Byron and other contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nimport { KeyedCollection, SetCollection } from './Collection.js';\nimport { IS_ORDERED_SYMBOL } from './predicates/isOrdered.js';\nimport { isOrderedSet } from './predicates/isOrderedSet.js';\nimport { IndexedCollectionPrototype } from './CollectionImpl.js';\nimport { Set } from './Set.js';\nimport { emptyOrderedMap } from './OrderedMap.js';\nimport assertNotInfinite from './utils/assertNotInfinite.js';\n\nvar OrderedSet = /*@__PURE__*/(function (Set) {\n  function OrderedSet(value) {\n    return value === undefined || value === null\n      ? emptyOrderedSet()\n      : isOrderedSet(value)\n      ? value\n      : emptyOrderedSet().withMutations(function (set) {\n          var iter = SetCollection(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function (v) { return set.add(v); });\n        });\n  }\n\n  if ( Set ) OrderedSet.__proto__ = Set;\n  OrderedSet.prototype = Object.create( Set && Set.prototype );\n  OrderedSet.prototype.constructor = OrderedSet;\n\n  OrderedSet.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  OrderedSet.fromKeys = function fromKeys (value) {\n    return this(KeyedCollection(value).keySeq());\n  };\n\n  OrderedSet.prototype.toString = function toString () {\n    return this.__toString('OrderedSet {', '}');\n  };\n\n  return OrderedSet;\n}(Set));\n\nOrderedSet.isOrderedSet = isOrderedSet;\n\nvar OrderedSetPrototype = OrderedSet.prototype;\nOrderedSetPrototype[IS_ORDERED_SYMBOL] = true;\nOrderedSetPrototype.zip = IndexedCollectionPrototype.zip;\nOrderedSetPrototype.zipWith = IndexedCollectionPrototype.zipWith;\nOrderedSetPrototype.zipAll = IndexedCollectionPrototype.zipAll;\n\nOrderedSetPrototype.__empty = emptyOrderedSet;\nOrderedSetPrototype.__make = makeOrderedSet;\n\nfunction makeOrderedSet(map, ownerID) {\n  var set = Object.create(OrderedSetPrototype);\n  set.size = map ? map.size : 0;\n  set._map = map;\n  set.__ownerID = ownerID;\n  return set;\n}\n\nvar EMPTY_ORDERED_SET;\nfunction emptyOrderedSet() {\n  return (\n    EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()))\n  );\n}\n\nexport { OrderedSet };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}