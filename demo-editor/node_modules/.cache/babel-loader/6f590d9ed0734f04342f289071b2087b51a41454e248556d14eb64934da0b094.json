{"ast":null,"code":"/**\n * @license\n * MIT License\n * \n * Copyright (c) 2014-present, Lee Byron and other contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nimport { isImmutable } from '../predicates/isImmutable.js';\nimport hasOwnProperty from '../utils/hasOwnProperty.js';\nimport isDataStructure from '../utils/isDataStructure.js';\nimport shallowCopy from '../utils/shallowCopy.js';\nfunction set(collection, key, value) {\n  if (!isDataStructure(collection)) {\n    throw new TypeError('Cannot update non-data-structure value: ' + collection);\n  }\n  if (isImmutable(collection)) {\n    if (!collection.set) {\n      throw new TypeError('Cannot update immutable value without .set() method: ' + collection);\n    }\n    return collection.set(key, value);\n  }\n  if (hasOwnProperty.call(collection, key) && value === collection[key]) {\n    return collection;\n  }\n  var collectionCopy = shallowCopy(collection);\n  collectionCopy[key] = value;\n  return collectionCopy;\n}\nexport { set };","map":{"version":3,"names":["isImmutable","hasOwnProperty","isDataStructure","shallowCopy","set","collection","key","value","TypeError","call","collectionCopy"],"sources":["C:/Users/udaym/OneDrive/Desktop/DraftJsEditor/node_modules/immutable/dist/es/functional/set.js"],"sourcesContent":["/**\n * @license\n * MIT License\n * \n * Copyright (c) 2014-present, Lee Byron and other contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nimport { isImmutable } from '../predicates/isImmutable.js';\nimport hasOwnProperty from '../utils/hasOwnProperty.js';\nimport isDataStructure from '../utils/isDataStructure.js';\nimport shallowCopy from '../utils/shallowCopy.js';\n\nfunction set(collection, key, value) {\n  if (!isDataStructure(collection)) {\n    throw new TypeError(\n      'Cannot update non-data-structure value: ' + collection\n    );\n  }\n  if (isImmutable(collection)) {\n    if (!collection.set) {\n      throw new TypeError(\n        'Cannot update immutable value without .set() method: ' + collection\n      );\n    }\n    return collection.set(key, value);\n  }\n  if (hasOwnProperty.call(collection, key) && value === collection[key]) {\n    return collection;\n  }\n  var collectionCopy = shallowCopy(collection);\n  collectionCopy[key] = value;\n  return collectionCopy;\n}\n\nexport { set };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,WAAW,QAAQ,8BAA8B;AAC1D,OAAOC,cAAc,MAAM,4BAA4B;AACvD,OAAOC,eAAe,MAAM,6BAA6B;AACzD,OAAOC,WAAW,MAAM,yBAAyB;AAEjD,SAASC,GAAGA,CAACC,UAAU,EAAEC,GAAG,EAAEC,KAAK,EAAE;EACnC,IAAI,CAACL,eAAe,CAACG,UAAU,CAAC,EAAE;IAChC,MAAM,IAAIG,SAAS,CACjB,0CAA0C,GAAGH,UAC/C,CAAC;EACH;EACA,IAAIL,WAAW,CAACK,UAAU,CAAC,EAAE;IAC3B,IAAI,CAACA,UAAU,CAACD,GAAG,EAAE;MACnB,MAAM,IAAII,SAAS,CACjB,uDAAuD,GAAGH,UAC5D,CAAC;IACH;IACA,OAAOA,UAAU,CAACD,GAAG,CAACE,GAAG,EAAEC,KAAK,CAAC;EACnC;EACA,IAAIN,cAAc,CAACQ,IAAI,CAACJ,UAAU,EAAEC,GAAG,CAAC,IAAIC,KAAK,KAAKF,UAAU,CAACC,GAAG,CAAC,EAAE;IACrE,OAAOD,UAAU;EACnB;EACA,IAAIK,cAAc,GAAGP,WAAW,CAACE,UAAU,CAAC;EAC5CK,cAAc,CAACJ,GAAG,CAAC,GAAGC,KAAK;EAC3B,OAAOG,cAAc;AACvB;AAEA,SAASN,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}